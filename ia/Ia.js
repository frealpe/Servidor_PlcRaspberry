// mqttConectar.js
const mqtt = require("mqtt");
const { config } = require("dotenv");
const { procesarPrompt } = require("../controllers/plcControllerAi"); // aseg√∫rate de que el archivo se llama as√≠

config();

  const apiKey = process.env.BROKER_APIKEY;
//////////////////////////////////////////////////////////////////////
// Configuraci√≥n del broker
const brokerUrl = 'mqtt://10.233.106.180:1883';
const options = {
    username: 'plcuser',
    password: 'plc',
    clientId: 'NodeClient_' + Math.random().toString(16).substr(2, 8)
};

const mqttClient = mqtt.connect(brokerUrl, options);

function Ia() {
  mqttClient.on("connect", () => {
    console.log("‚úÖ Conectado al broker MQTT");

    mqttClient.subscribe("Plc/Ia", { qos: 1 }, (err) => {
      if (err) console.error("‚ùå Error suscribi√©ndose a Plc/Ia:", err);
      else console.log("üì° Suscrito a Plc/Ia");
    });
  });

  mqttClient.on("message", async (topic, message) => {
    if (topic === "Plc/Ia") {
      const msg = message.toString();
      console.log("üì• Recibido de Plc/Ia:", msg);

      try {
        const resultado = await procesarPrompt(msg);
        console.log("‚öôÔ∏è Resultado generado:", resultado);

        // üì° Publicar la respuesta en otro topic
        publicarMQTT("Plc/Respuesta", JSON.stringify(resultado));

      } catch (err) {
        console.error("‚ùå Error procesando mensaje MQTT:", err.message);
      }
    }
  });

  mqttClient.on("error", (err) => {
    console.error("üö® Error MQTT:", err);
  });
}

// Funci√≥n para publicar mensajes
function publicarMQTT(topic, mensaje) {
  if (mqttClient && mqttClient.connected) {
    mqttClient.publish(topic, mensaje, { qos: 1 }, (err) => {
      if (err) console.error(`‚ùå Error al publicar en ${topic}:`, err);
      else console.log(`üì§ Publicado en ${topic}: ${mensaje}`);
    });
  } else {
    console.log("‚ö†Ô∏è Cliente MQTT no conectado");
  }
}

module.exports = { mqttClient, Ia, publicarMQTT };
